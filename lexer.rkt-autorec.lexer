#lang racket/base
(require
  racket/class
  racket/string
  racket/function
  racket/match
  racket/format
  racket/list
  math/array
  (except-in brag/support ::)
  "lex-utils.rkt")

(provide bqn-tokenizer)

(define (parse-real str)
  (string->number (string-replace (string-replace str "_" "") "¯" "-")))

(define (parse-num str)
  (let ([cmplx-comps (string-split str "i")])
    (if (equal? 1 (length cmplx-comps))
        (parse-real str)
        (apply make-rectangular
               (map parse-real cmplx-comps)))))

(define (id-token str literal custom)
  (define id (string->symbol (string-downcase (string-replace str "_" ""))))
  (if (string-prefix? str "•")
      (token literal id)
      (token custom  id))
  )

(define (bqn-tokenizer port [path #f])
  (port-count-lines! port)
  (lexer-file-path path)

  (define lexer
    (new bqn-lexer%)
    )
  
  (thunk (send lexer lex port)))

(define (lex-debug string)
  (define lexer (new bqn-lexer-debugger%))
  (apply-port-proc lexer string)
  )

(define bqn-lexer%
  (class object%    
    (field [stack  '()]
           [buffer '()])

    (super-new)

    (define/public (stack-push! new-item)
      (set! stack (cons new-item stack))
      )

    (define/public (stack-pop!)
      (begin0
        (first stack)
        (set! stack (rest stack))))

    (define (get-body-type)
      (case (first stack)
        [( 0  1  3  9)  #\;]
        [( 2  6 18)    'MONAD]
        [( 4 12 36)    'DYAD])
      )

    (define (add-special! lexeme)
      (define special-downcase
        (case lexeme
          [("𝕎" "𝕨") '𝕨]
          [("𝕊" "𝕤") '𝕤]
          [("𝕏" "𝕩") '𝕩]
          [("𝔽" "𝕗") '𝕗]
          [("𝔾" "𝕘") '𝕘]))

      (define role
        (case special-downcase
          [(𝕤 𝕩) 2]
          [(𝕨)   4]
          [(𝕗)   3]
          [(𝕘)   9]))

      (if (empty? stack)
          (error (string-append "Special name " lexeme " found outside block"))
          (stack-push! (lcm (first stack) role)))

      (token lexeme special-downcase)
      )

    (define num-lexer
      (lexer-srcloc
       [(lx/+ #\_) (token '_ lexeme #:skip? #t)]
     
       [(lx/: -? int)
        (token 'INTEGER (parse-real lexeme))]

       [rkt-real
        (token 'REAL (parse-real lexeme))]

       [(lx/or #\. #\e #\i notation)
        (token lexeme)]

       [(lx/or #\E #\I)
        (token (string-downcase lexeme))]
     
       [(lx// "ADFHJZadfhjz")
        (error (~a "Letter '" lexeme "' not allowed in numbers"))]

       [(lx/+ (lx// "ADFHJZadfhjz"))
        (error (~a "Letters \"" lexeme "\" not allowed in numbers"))]

       ["" (begin
             (set! current-lexer main-lexer)
             (main-lexer input-port))]
       ))

    (define main-lexer
      (lexer-srcloc
       [notation
        (begin
          (set! current-lexer num-lexer)
          (token lexeme (string->symbol lexeme)))]

       [(lx/: -? int)
        (begin
          (set! current-lexer num-lexer)
          (token 'INTEGER (parse-real lexeme)))]

       [rkt-real
        (begin
          (set! current-lexer num-lexer)
          (token 'REAL (parse-real lexeme)))]

       [rkt-number
        (token 'NUMBER (parse-num lexeme))]
   
       [func-prim
        (token 'FUNC-LITERAL (string->symbol (~a "BQN" lexeme)))]
     
       [1mod-prim
        (token '1MOD-LITERAL (string->symbol (~a "BQN" lexeme)))]
     
       [2mod-prim
        (token '2MOD-LITERAL (string->symbol (~a "BQN" lexeme)))]

       [#\@ (token 'CHARACTER #\null)]

       [nothing-dot (token 'NOTHING '·)]

       [#\. (token ".")]
     
       [(lx/+ newline) #\⋄]
     
       [(lx/: #\' any-char #\')
        (token 'CHARACTER (second (string->list lexeme)))]
 
       [string
        (token 'STRING (list->array (quote-filter (string->list lexeme))))]

       [(lx/: #\• string)
        (token 'RKT-STRING (substring lexeme 2 (sub1 (string-length lexeme))))]
     
       [comment
        (token 'COMMENT (substring lexeme 1) #:skip? #t)]
     
       [(lx/+ white-space) (token lexeme #:skip? #t)]

       [#\{
        (begin
          (stack-push! 1)
          lexeme)]

       [#\:
        (if (empty? stack)
            (error "Colon found outside block")
            (begin
              (set! stack (cons 0 (rest stack)))
              lexeme))]

       [(lx/: (lx/? #\_) #\𝕣 (lx/? #\_))
        (begin
          (match (cons lexeme stack)
            ['() (error "Special name 𝕣 found outside block")]
            [(list* _ (or "𝕘" "𝔾") _) empty]
            [(list* "_𝕣_" current-block outer-blocks)
             (set! stack
               (cons (lcm current-block 9)
                     outer-blocks))]
            [(list* _ current-block outer-blocks)
             (set! stack
               (cons (lcm current-block 3)
                     outer-blocks))])
          (token lexeme '𝕣))]

       [(lx/or special-sub special-func) (add-special! lexeme)]
       
       [#\;
        (if (empty? stack)
            (error "';' found outside block")
            (begin0
              (get-body-type)
              (let ([head
                     (if (zero? (first stack))
                         1 (gcd (first stack) 9))])
                (set! stack (cons head (rest stack))))))]

       [#\}
        (if (empty? stack)
            (error "'}' has no matching '{'")
            (let ([body-type (get-body-type)]
                  [block-type
                   (case (first stack)
                     [( 0  1)  lexeme]
                     [( 2  4)  'FUNC-BLOCK]
                     
                     [( 3  6 12) '1M-BLOCK]
                     [( 9 18 36) '2M-BLOCK])])
              (begin
                (stack-pop!)
                (return-without-srcloc
                 (list
                  (make-srcloc-token body-type  lexeme-srcloc)
                  (make-srcloc-token block-type lexeme-srcloc)))
                )))]

       [(lx/or "•Require")
        (token (string->symbol lexeme))]

       [2mod-name
        (id-token lexeme '2MOD-LITERAL '2MOD-CUSTOM)]

       [rkt-2mod
        (token '2MOD-CUSTOM (string->symbol (trim-rkt lexeme)))]

       [1mod-name
        (id-token lexeme '1MOD-LITERAL '1MOD-CUSTOM)]

       [rkt-1mod
        (token '1MOD-CUSTOM (string->symbol (trim-rkt lexeme)))]
      
       [func-name
        (id-token lexeme 'FUNC-LITERAL 'FUNC-CUSTOM)]

       [rkt-func
        (token 'FUNC-CUSTOM (string->symbol (trim-rkt lexeme)))]

       [sub-name
        (id-token lexeme 'SUB-LITERAL 'SUB-CUSTOM)]

       [rkt-sub
        (token 'SUB-CUSTOM (string->symbol (trim-rkt lexeme)))]

       [(lx/or brackets assign #\‿)
        (token lexeme (string->symbol lexeme))]
       ))

    (define current-lexer main-lexer)

    (define/public (lex port)
      (if (cons? buffer)
          (begin0
            (first buffer)
            (set! buffer (rest buffer)))
          (let ([lex-res (current-lexer port)])
            (if (cons? lex-res)
                (begin
                  (set! buffer lex-res)
                  (lex port))
                lex-res)
            ))
      )
    ))

(define bqn-lexer-debugger%
  (class bqn-lexer%
    (super-new)
    (inherit-field stack buffer)

    (define/override (stack-push! new-item)
      (super stack-push! new-item)
      (display stack)
      )

    (define/override (stack-pop!)
      (super stack-pop!)
      (display stack))

    (define (strip token)
      (define strip-srcloc (srcloc-token-token token))

      (if (struct? strip-srcloc)
          (token-struct-type strip-srcloc)
          strip-srcloc))

    (define/override (lex port)
      (display (strip (super lex port)))
      )
    ))